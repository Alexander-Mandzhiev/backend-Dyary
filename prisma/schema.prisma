generator client {
  provider = "prisma-client-js"
  output   = "generated/client"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @unique @default(cuid())
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  email        String        @unique
  password     String
  username     String?
  tasks        Task[]
  timeBlocks   TimeBlock[]
  userSessions UserSession[]
  userSettings UserSetting?

  @@map("user")
}

model UserSetting {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  workInterval   Int?     @default(50) @map("work_interval")
  breakInterval  Int?     @default(10) @map("break_interval")
  intervalsCount Int?     @default(7) @map("intervals_count")
  userId         String   @unique @map("user_id")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Task {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  name        String
  priority    Priority?
  isCompleted Boolean?  @default(false) @map("is_completed")
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id])

  @@map("task")
}

model TimeBlock {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String
  color     String?
  duration  Int
  order     Int      @default(1)
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])

  @@map("time_block")
}

model UserSession {
  id          String         @id @default(cuid())
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @updatedAt @map("updated_at")
  isCompleted Boolean?       @default(false) @map("is_completed")
  userId      String         @map("user_id")
  rounds      SessionRound[]
  user        User           @relation(fields: [userId], references: [id])

  @@map("user_session")
}

model SessionRound {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  isCompleted   Boolean?    @default(false) @map("is_completed")
  userSessionId String      @map("user_session_id")
  totalSeconds  Int         @map("total_seconds")
  userSession   UserSession @relation(fields: [userSessionId], references: [id], onDelete: Cascade)

  @@map("session_round")
}

enum Priority {
  low
  medium
  high
}
